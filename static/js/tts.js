(function(){
  if (window.__NEWS_VA_INITED__) return;
  window.__NEWS_VA_INITED__ = true;

  const SRClass = window.SpeechRecognition || window.webkitSpeechRecognition;
  const SR_SUPPORTED  = !!SRClass;
  const TTS_SUPPORTED = 'speechSynthesis' in window;

  const feed = document.querySelector('section.feed') || document;
  const cards = [...feed.querySelectorAll('article')];
  if (!cards.length) return;

  (function ensureCss(){
    if (document.getElementById('va-css-outline')) return;
    const st = document.createElement('style');
    st.id = 'va-css-outline';
    st.textContent = `
      .va-current{outline:3px solid #2563eb; outline-offset:6px; border-radius:12px}
      .va-news-ui{position:fixed;right:12px;bottom:12px;display:flex;gap:8px;align-items:center;z-index:99999;font:14px/1.2 system-ui,-apple-system,Segoe UI,Roboto,sans-serif}
      .va-news-ui #va-news-toggle{background:#111;color:#fff;border:none;border-radius:999px;padding:10px 14px;cursor:pointer;box-shadow:0 4px 16px rgba(0,0,0,.18)}
      .va-news-ui #va-news-toggle[aria-pressed="true"]{background:#2563eb}
      .va-news-ui #va-news-status{background:#111;color:#fff;padding:6px 10px;border-radius:999px;opacity:.85}
    `;
    document.head.appendChild(st);
  })();

  let toggleBtn = document.getElementById('va-news-toggle');
  let statusEl  = document.getElementById('va-news-status');
  if (!toggleBtn || !statusEl){
    const wrap = document.createElement('div');
    wrap.className = 'va-news-ui';
    wrap.innerHTML = `
      <button id="va-news-toggle" type="button" aria-pressed="false">üéô –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å</button>
      <span id="va-news-status" aria-live="polite">–û—Ç–∫–ª—é—á–µ–Ω–æ</span>
    `;
    document.body.appendChild(wrap);
    toggleBtn = wrap.querySelector('#va-news-toggle');
    statusEl  = wrap.querySelector('#va-news-status');
  }
  const setStatus = (t)=>{ statusEl.textContent = t; };

  let curIndex = 0;
  function inViewport(el){
    const r = el.getBoundingClientRect();
    const vh = innerHeight || document.documentElement.clientHeight;
    return r.top >= 0 && r.bottom <= vh;
  }
  function highlight(i, {scroll=true} = {}){
    cards.forEach(c=>c.classList.remove('va-current'));
    const el = cards[i]; if (!el) return;
    el.classList.add('va-current');
    if (scroll && !inViewport(el)) el.scrollIntoView({block:'center', behavior:'smooth'});
  }
  function goto(i){
    curIndex = Math.max(0, Math.min(i, cards.length-1));
    highlight(curIndex);
    setStatus(`–ù–æ–≤–æ—Å—Ç—å ${curIndex+1}/${cards.length}`);
  }
  function next(){ if (curIndex < cards.length-1){ stopTTS(true); goto(curIndex+1); } else setStatus('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è'); }
  function prev(){ if (curIndex > 0){ stopTTS(true); goto(curIndex-1); } else setStatus('–≠—Ç–æ –ø–µ—Ä–≤–∞—è'); }

  let isNavigating = false;
  function openCurrent(){
    if (isNavigating) return;
    const el = cards[curIndex];
    const a = el && (el.querySelector('.post__title a, a.post__thumb, a[href]'));
    const url = a && (a.getAttribute('href') || a.href);
    if (!url){ setStatus('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); return; }
    isNavigating = true;
    stopTTS(true);
    setTimeout(()=>{ location.assign(url); }, 160);
  }

  highlight(curIndex, {scroll:false});

  const SCREEN_STEP = ()=> Math.round((innerHeight||document.documentElement.clientHeight)*0.9);
  function scrollByPx(px){ window.scrollBy({top:px, behavior:'smooth'}); }
  function scrollDownScreens(n=1){ scrollByPx(SCREEN_STEP()*(n||1)); }
  function scrollUpScreens(n=1){ scrollByPx(-SCREEN_STEP()*(n||1)); }
  function scrollByPercent(p){
    const max = document.documentElement.scrollHeight - (innerHeight||0);
    scrollByPx(Math.round(max*(p/100)));
  }

  let newsUtter = null;
  let ttsPaused = false;
  let ttsStopping = false;

  function normText(s){ return (s||'').replace(/\s+/g,' ').trim(); }
  function buildCardText(el){
    const tag   = normText(el.querySelector('.post__tag')?.textContent);
    const title = normText(el.querySelector('.post__title')?.textContent);
    const lead  = normText(el.querySelector('.post__lead')?.textContent);
    const date  = normText(el.querySelector('time')?.textContent);
    const auth  = normText(el.querySelector('.post__author')?.textContent);
    const parts = [];
    if (tag) parts.push(tag);
    if (title) parts.push(title);
    if (lead) parts.push(lead);
    if (date || auth) parts.push([date, auth].filter(Boolean).join(', '));
    return parts.join('. ') + (parts.length ? '.' : '');
  }
  function speakCard(i = curIndex){
    if (!TTS_SUPPORTED){ setStatus('–û–∑–≤—É—á–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'); return; }
    isNavigating = false;
    stopTTS(true);
    const el = cards[i]; if (!el){ setStatus('–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏'); return; }
    const text = buildCardText(el); if (!text){ setStatus('–ü—É—Å—Ç–æ –¥–ª—è —á—Ç–µ–Ω–∏—è'); return; }

    newsUtter = new SpeechSynthesisUtterance(text);
    newsUtter.lang = 'ru-RU';
    newsUtter.rate = 1.0;
    newsUtter.onstart = ()=>{ ttsPaused=false; setStatus('–ß–∏—Ç–∞—é –Ω–æ–≤–æ—Å—Ç—å'); };
    newsUtter.onend   = ()=>{ if(!ttsStopping) setStatus('–ì–æ—Ç–æ–≤–æ'); newsUtter=null; ttsPaused=false; ttsStopping=false; };
    newsUtter.onerror = (e)=>{
      if (ttsStopping || (e && (e.error==='canceled' || e.error==='interrupted'))) {
        setStatus('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      } else {
        setStatus('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏');
      }
      newsUtter=null; ttsPaused=false; ttsStopping=false;
    };
    try { window.speechSynthesis.speak(newsUtter); }
    catch { setStatus('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏'); newsUtter=null; ttsPaused=false; ttsStopping=false; }
  }
  function robustPause(retries=6){
    const tick=()=>{ try{ speechSynthesis.pause(); }catch{}; if(!speechSynthesis.paused && retries-- > 0) setTimeout(tick,70); else { ttsPaused=speechSynthesis.paused; if(ttsPaused) setStatus('–ü–∞—É–∑–∞'); } };
    tick();
  }
  function stopTTS(silent=false){
    if (newsUtter || speechSynthesis.speaking){ ttsStopping=true; try{ speechSynthesis.cancel(); }catch{} }
    newsUtter=null; ttsPaused=false;
    if (!silent) setStatus('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    setTimeout(()=>{ ttsStopping=false; }, 200);
  }
  function pauseTTS(){ if (!newsUtter && !speechSynthesis.speaking) return; if (!speechSynthesis.paused) robustPause(); }
  function resumeTTS(){
    if (speechSynthesis.paused){ try{ speechSynthesis.resume(); ttsPaused=false; setStatus('–ß–∏—Ç–∞—é –Ω–æ–≤–æ—Å—Ç—å'); }catch{} }
    else if (!newsUtter){ speakCard(curIndex); }
  }

  if (!SR_SUPPORTED){
    if (toggleBtn) toggleBtn.disabled = true;
    setStatus('–ì–æ–ª–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return;
  }

  const newsRec = new SRClass();
  newsRec.lang = 'ru-RU';
  newsRec.continuous = true;
  newsRec.interimResults = false;
  newsRec.maxAlternatives = 1;

  let newsActive = false;
  let newsRestarting = false;
  let newsHeardAt = Date.now();

  function startSR(){
    if (newsActive) return;
    try{
      newsRec.start(); newsActive = true; newsHeardAt = Date.now();
      if (toggleBtn){ toggleBtn.setAttribute('aria-pressed','true'); toggleBtn.textContent='‚ñ† –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'; }
      setStatus('–°–ª—É—à–∞—é‚Ä¶');
    }catch{ setStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞'); }
  }
  function stopSR(){
    if (!newsActive) return;
    try{ newsRec.stop(); }catch{}
    newsActive = false; newsRestarting = false;
    if (toggleBtn){ toggleBtn.setAttribute('aria-pressed','false'); toggleBtn.textContent='üéô –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å'; }
    setStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ');
  }
  function restartSR(){
    if (!newsActive || newsRestarting) return;
    newsRestarting = true;
    try{ (typeof newsRec.abort==='function') ? newsRec.abort() : newsRec.stop(); }catch{}
    setTimeout(()=>{ try{ newsRec.start(); newsHeardAt = Date.now(); setStatus('–°–ª—É—à–∞—é‚Ä¶'); }catch{ setStatus('–û–∂–∏–¥–∞–Ω–∏–µ‚Ä¶'); } finally{ newsRestarting=false; } }, 700);
  }
  if (toggleBtn) toggleBtn.addEventListener('click', ()=> newsActive ? stopSR() : startSR());

  const WATCHDOG_MS = 15000;
  setInterval(()=>{ if (newsActive && Date.now()-newsHeardAt > WATCHDOG_MS) restartSR(); }, 4000);
  document.addEventListener('visibilitychange', ()=>{ if (document.visibilityState==='visible' && newsActive) restartSR(); });

  function norm(s){
    return s
      .toLowerCase()
      .replace(/\u00a0/g, ' ')
      .replace(/[—ë]/g,'–µ')
      .replace(/[^0-9a-z–∞-—è\s‚Ññ-]/giu,' ')
      .replace(/\s+/g,' ')
      .trim();
  }

  const CARDINALS = {
    '–Ω–æ–ª—å':0,'–æ–¥–∏–Ω':1,'–æ–¥–Ω–∞':1,'–¥–≤–∞':2,'–¥–≤–µ':2,'—Ç—Ä–∏':3,'—á–µ—Ç—ã—Ä–µ':4,'–ø—è—Ç—å':5,'—à–µ—Å—Ç—å':6,'—Å–µ–º—å':7,'–≤–æ—Å–µ–º—å':8,'–¥–µ–≤—è—Ç—å':9,
    '–¥–µ—Å—è—Ç—å':10,'–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å':11,'–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å':12,'—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å':13,'—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å':14,'–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å':15,
    '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å':16,'—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å':17,'–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å':18,'–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å':19,
    '–¥–≤–∞–¥—Ü–∞—Ç—å':20,'—Ç—Ä–∏–¥—Ü–∞—Ç—å':30,'—Å–æ—Ä–æ–∫':40,'–ø—è—Ç—å–¥–µ—Å—è—Ç':50,'—à–µ—Å—Ç—å–¥–µ—Å—è—Ç':60,'—Å–µ–º—å–¥–µ—Å—è—Ç':70,'–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç':80,'–¥–µ–≤—è–Ω–æ—Å—Ç–æ':90
  };
  const ORDINALS = {
    '–ø–µ—Ä–≤–∞—è':1,'–ø–µ—Ä–≤—ã–π':1,'–≤—Ç–æ—Ä–∞—è':2,'–≤—Ç–æ—Ä–æ–π':2,'—Ç—Ä–µ—Ç—å—è':3,'—Ç—Ä–µ—Ç–∏–π':3,'—á–µ—Ç–≤–µ—Ä—Ç–∞—è':4,'—á–µ—Ç–≤–µ—Ä—Ç—ã–π':4,
    '–ø—è—Ç–∞—è':5,'–ø—è—Ç—ã–π':5,'—à–µ—Å—Ç–∞—è':6,'—à–µ—Å—Ç–æ–π':6,'—Å–µ–¥—å–º–∞—è':7,'—Å–µ–¥—å–º–æ–π':7,'–≤–æ—Å—å–º–∞—è':8,'–≤–æ—Å—å–º–æ–π':8,'–¥–µ–≤—è—Ç–∞—è':9,'–¥–µ–≤—è—Ç—ã–π':9,
    '–¥–µ—Å—è—Ç–∞—è':10,'–¥–µ—Å—è—Ç—ã–π':10
  };

  function wordsToNumber(q){
    const tens = ['–¥–≤–∞–¥—Ü–∞—Ç—å','—Ç—Ä–∏–¥—Ü–∞—Ç—å','—Å–æ—Ä–æ–∫','–ø—è—Ç—å–¥–µ—Å—è—Ç','—à–µ—Å—Ç—å–¥–µ—Å—è—Ç','—Å–µ–º—å–¥–µ—Å—è—Ç','–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç','–¥–µ–≤—è–Ω–æ—Å—Ç–æ'];
    const unitsMap = {'–æ–¥–∏–Ω':1,'–æ–¥–Ω–∞':1,'–¥–≤–∞':2,'–¥–≤–µ':2,'—Ç—Ä–∏':3,'—á–µ—Ç—ã—Ä–µ':4,'–ø—è—Ç—å':5,'—à–µ—Å—Ç—å':6,'—Å–µ–º—å':7,'–≤–æ—Å–µ–º—å':8,'–¥–µ–≤—è—Ç—å':9};
    const re = new RegExp(`(?:^|\\s)(?:–Ω–æ–≤–æ—Å—Ç[—å–∏]\\s*)?(?:(${tens.join('|')})\\s+(${Object.keys(unitsMap).join('|')}))(?:\\s|$)`, 'iu');
    const m = q.match(re);
    if (m){
      const u = (m[2]==='–æ–¥–Ω–∞') ? '–æ–¥–∏–Ω' : m[2];
      return (CARDINALS[m[1]]||0) + (unitsMap[u]||0);
    }
    return null;
  }

  function parseIndex(q){
    let m = q.match(/(?:^|\s)(?:–∫\s*)?(?:–Ω–æ–≤–æ—Å—Ç[—å–∏]|–Ω–æ–º–µ—Ä)\s*(?:–ø–æ–¥\s*–Ω–æ–º–µ—Ä–æ–º|‚Ññ|–Ω–æ–º–µ—Ä)?\s*(\d{1,3})(?:\s|$)/iu);
    if (m) return +m[1];

    m = q.match(/(?:^|\s)(?:–≤—ã–±–µ—Ä–∏|–≤—ã–¥–µ–ª–∏|–ø–æ–∫–∞–∂–∏|–ø–µ—Ä–µ–π–¥–∏|–æ—Ç–∫—Ä–æ–π)\s*(?:–∫\s*)?(?:–Ω–æ–≤–æ—Å—Ç[—å–∏]\s*)?(?:–ø–æ–¥\s*–Ω–æ–º–µ—Ä–æ–º|‚Ññ|–Ω–æ–º–µ—Ä)?\s*(\d{1,3})(?:\s|$)/iu);
    if (m) return +m[1];

    for (const [w,n] of Object.entries(ORDINALS)){
      if (new RegExp(`(?:^|\\s)${w}\\s+–Ω–æ–≤–æ—Å—Ç[—å–∏](?:\\s|$)`, 'iu').test(q)) return n;
      if (new RegExp(`(?:^|\\s)–Ω–æ–≤–æ—Å—Ç[—å–∏]\\s+${w}(?:\\s|$)`, 'iu').test(q)) return n;
    }

    for (const [w,n] of Object.entries(CARDINALS)){
      if (new RegExp(`(?:^|\\s)(?:–Ω–æ–≤–æ—Å—Ç[—å–∏]\\s+)?${w}(?:\\s|$)`, 'iu').test(q)) return n;
    }

    const comp = wordsToNumber(q);
    if (comp!=null) return comp;

    return null;
  }

  function parseCount(q){
    let m = q.match(/(\d{1,2})\s*—ç–∫—Ä–∞–Ω/iu); if (m) return +m[1];
    for (const [w,n] of Object.entries(CARDINALS)){ const re=new RegExp(`\\b${w}\\s*—ç–∫—Ä–∞–Ω`, 'iu'); if(re.test(q)) return n; }
    return 1;
  }
  function parsePercent(q){ const m = q.match(/(\d{1,3})\s*%|(\d{1,3})\s*–ø—Ä–æ—Ü–µ–Ω—Ç/iu); return m ? +(m[1]||m[2]) : null; }
  function allowedWhileSpeaking(q){
    return /(—Å—Ç–æ–ø|–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å|–ø–∞—É–∑–∞|–ø—Ä–æ–¥–æ–ª–∂–∏|–¥–∞–ª—å—à–µ|—Å–ª–µ–¥—É—é—â|–Ω–∞–∑–∞–¥|–ø—Ä–µ–¥—ã–¥—É—â|–ø—Ä–æ—à–ª|–∑–∞–π—Ç–∏|–æ—Ç–∫—Ä—ã—Ç—å|–ø–µ—Ä–µ–π—Ç–∏|–æ–∑–≤—É—á—å|–≤–≤–µ—Ä—Ö|–≤–Ω–∏–∑|–ø—Ä–æ–∫—Ä—É—Ç|–Ω–æ–≤–æ—Å—Ç|–Ω–æ–º–µ—Ä|—ç–∫—Ä–∞–Ω|%|–ø—Ä–æ—Ü–µ–Ω—Ç)/iu.test(q);
  }

  function handleSpeech(cmdRaw){
    const q = norm(cmdRaw);

    if (TTS_SUPPORTED && speechSynthesis.speaking && !speechSynthesis.paused){
      if (!allowedWhileSpeaking(q)) return;
    }

    const pick = parseIndex(q);
    if (pick!=null && pick>=1 && pick<=cards.length){ stopTTS(true); goto(pick-1); return; }

    if (/(–¥–∞–ª—å—à–µ|—Å–ª–µ–¥—É—é—â(–∞—è|—É—é)|–≤–ø–µ—Ä–µ–¥|–≤–ø–µ—Ä—ë–¥)/iu.test(q)) { next(); return; }
    if (/(–Ω–∞–∑–∞–¥|–ø—Ä–µ–¥—ã–¥—É—â(–∞—è|—É—é)|–ø—Ä–æ—à–ª(–∞—è|—É—é))/iu.test(q))   { prev(); return; }
    if (/(–∑–∞–π—Ç–∏|–æ—Ç–∫—Ä—ã—Ç—å|–ø–µ—Ä–µ–π—Ç–∏|–≤–æ–π—Ç–∏|—á–∏—Ç–∞—Ç—å)/iu.test(q))   { openCurrent(); return; }

    if (/(–æ–∑–≤—É—á—å|–ø—Ä–æ—á–∏—Ç–∞–π|–ø—Ä–æ—á–µ—Å—Ç—å)/iu.test(q)) { speakCard(curIndex); return; }
    if (/(—Å—Ç–æ–ø|–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å|—Ö–≤–∞—Ç–∏—Ç|–∑–∞—Ç–∫–Ω–∏—Å—å)/iu.test(q)) { stopTTS(); return; }
    if (/–ø–∞—É–∑–∞/iu.test(q)) { pauseTTS(); return; }
    if (/–ø—Ä–æ–¥–æ–ª–∂(–∏|–∏—Ç—å)/iu.test(q)) { resumeTTS(); return; }

    if (/(–≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö|–Ω–∞–≤–µ—Ä—Ö|–≤ –Ω–∞—á–∞–ª–æ)/iu.test(q)) { window.scrollTo({top:0,behavior:'smooth'}); return; }
    if (/(–≤ —Å–∞–º—ã–π –Ω–∏–∑|–≤ –∫–æ–Ω–µ—Ü|–≤–Ω–∏–∑ –¥–æ –∫–æ–Ω—Ü–∞)/iu.test(q)) { window.scrollTo({top:document.documentElement.scrollHeight,behavior:'smooth'}); return; }
    if (/(–≤–Ω–∏–∑|–ø—Ä–æ–∫—Ä—É—Ç[–∏]? –≤–Ω–∏–∑)/iu.test(q)){
      const pct = parsePercent(q); if (pct!=null){ scrollByPercent(pct); return; }
      const n = parseCount(q); scrollDownScreens(n); return;
    }
    if (/(–≤–≤–µ—Ä—Ö|–ø—Ä–æ–∫—Ä—É—Ç[–∏]? –≤–≤–µ—Ä—Ö)/iu.test(q)){
      const pct = parsePercent(q); if (pct!=null){ scrollByPercent(-pct); return; }
      const n = parseCount(q); scrollUpScreens(n); return;
    }
  }

  newsRec.onresult = (ev)=>{
    for (let i=ev.resultIndex; i<ev.results.length; i++){
      const r = ev.results[i];
      if (r.isFinal){ newsHeardAt = Date.now(); handleSpeech(r[0].transcript.trim()); }
    }
  };
  newsRec.onerror = (ev)=>{ setStatus('–û—à–∏–±–∫–∞: '+(ev.error||'–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')); if(newsActive && ['no-speech','aborted','network'].includes(ev.error||'')) restartSR(); };
  newsRec.onend   = ()=>{ if(newsActive) restartSR(); };

  setStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ');
})();