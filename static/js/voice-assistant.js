(function(){
  if (window.__VA_INIT__) return;
  window.__VA_INIT__ = true;

  const SpeechRec = window.SpeechRecognition || window.webkitSpeechRecognition;
  const supported = !!SpeechRec;

  const DEBUG = true;
  const log = (...a)=>{ if(DEBUG) console.log('[VA]', ...a); };
  const group = (t)=>{ if(DEBUG) console.groupCollapsed('[VA]', t); };
  const end = ()=>{ if(DEBUG) console.groupEnd(); };

  const NUMBER_WORDS = {
    "–Ω–æ–ª—å":0,"–ø—è—Ç—å–¥–µ—Å—è—Ç":50,"—à–µ—Å—Ç—å–¥–µ—Å—è—Ç":60,"—Å–µ–º—å–¥–µ—Å—è—Ç":70,"–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç":80,"–¥–µ–≤—è–Ω–æ—Å—Ç–æ":90,
    "—Å—Ç–æ":100,"—Å—Ç–æ –¥–µ—Å—è—Ç—å":110,"—Å—Ç–æ –¥–≤–∞–¥—Ü–∞—Ç—å":120,"—Å—Ç–æ —Ç—Ä–∏–¥—Ü–∞—Ç—å":130,"—Å—Ç–æ —Å–æ—Ä–æ–∫":140,
    "—Å—Ç–æ –ø—è—Ç—å–¥–µ—Å—è—Ç":150,"—Å—Ç–æ —à–µ—Å—Ç—å–¥–µ—Å—è—Ç":160,"—Å—Ç–æ —Å–µ–º—å–¥–µ—Å—è—Ç":170,"—Å—Ç–æ –≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç":180,"—Å—Ç–æ –¥–µ–≤—è–Ω–æ—Å—Ç–æ":190,"–¥–≤–µ—Å—Ç–∏":200
  };

  const hostBar = (typeof bar !== 'undefined' && bar) ? bar : document.querySelector('.a11y-bar');
  if (!hostBar) { log('–ü–∞–Ω–µ–ª—å .a11y-bar –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); return; }

  const voiceGroup = document.createElement('div');
  voiceGroup.className = 'a11y-group';
  voiceGroup.innerHTML = `
    <span class="a11y-title">–ì–æ–ª–æ—Å</span>
    <button class="a11y-btn" id="va-toggle" title="Alt+G">${supported ? 'üéô –í–ö–õ' : 'üö´ –ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏'}</button>
    <div class="a11y-chip" id="va-status" style="min-width:120px;text-align:center">${supported ? '–û—Ç–∫–ª—é—á–µ–Ω–æ' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}</div>
  `;
  hostBar.querySelector('.a11y-row')?.appendChild(voiceGroup);

  const navGroup = document.createElement('div');
  navGroup.className = 'a11y-group';
  navGroup.innerHTML = `
    <span class="a11y-title">–ù–∞–≤–∏–≥–∞—Ü–∏—è</span>
    <button class="a11y-btn" id="va-back" title="–ù–∞–∑–∞–¥">‚óÄ –ù–∞–∑–∞–¥</button>
    <button class="a11y-btn" id="va-home" title="–î–æ–º–æ–π">üè† –î–æ–º–æ–π</button>
  `;
  hostBar.querySelector('.a11y-row')?.appendChild(navGroup);

  const $ = sel => hostBar.querySelector(sel);
  const setStatus = (txt)=>{ const chip = $('#va-status'); if (chip) chip.textContent = txt; };

  $('#va-back')?.addEventListener('click', ()=>{ if (history.length > 1) history.back(); else location.assign((location.origin||'/')+'/'); });
  $('#va-home')?.addEventListener('click', ()=>{ location.assign((location.origin||'/')+'/'); });

  if (!supported) return;

  const btn = {
    fsInc: $('#fs-inc'), fsDec: $('#fs-dec'), fsReset: $('#fs-reset'),
    imgOn: $('#img-on'), imgOff: $('#img-off'),
    ttsPlay: $('#tts-play'), ttsPause: $('#tts-pause'), ttsStop: $('#tts-stop'),
    toggleSub: $('#toggle-sub'),
    lhStd: $('#lh-std'), lhMd: $('#lh-md'), lhLg: $('#lh-lg'),
    tr0: $('#tr-0'), tr1: $('#tr-1'), tr15: $('#tr-15'), tr2: $('#tr-2'),
    fSans: $('#f-sans'), fSerif: $('#f-serif'), fMono: $('#f-mono')
  };

  function setFontScale(scale){ if(typeof state!=='object')return; const s=Math.max(0.5,Math.min(3,Number(scale)||1)); state.fontScale=+s.toFixed(3); if(typeof apply==='function') apply(); }
  function nudgeFont(delta){ if(btn.fsInc&&btn.fsDec){ (delta>0?btn.fsInc:btn.fsDec).click(); } else if(typeof state==='object'&&typeof apply==='function'){ state.fontScale=+(state.fontScale+delta).toFixed(3); apply(); } }
  function setTheme(name){ if(typeof state!=='object'||typeof apply!=='function')return; const map={'default':'default','–æ–±—ã—á–Ω–∞—è':'default','—Å–≤–µ—Ç–ª–∞—è':'default','—Ç—ë–º–Ω–∞—è':'dark','—Ç–µ–º–Ω–∞—è':'dark','—Å–∏–Ω—è—è':'blue','—Å–∏–Ω–µ-—Ç—ë–º–Ω–∞—è':'blue','—Å–µ–ø–∏—è':'sepia','–∫–æ–Ω—Ç—Ä–∞—Å—Ç':'contrast','–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è':'contrast'}; state.theme=map[name]||name||'default'; apply(); }
  function setImages(on){ if(typeof state==='object'&&typeof apply==='function'){ state.images=on?'on':'off'; apply(); } }
  function setLineHeight(kind){ const map={'—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π':'std','–æ–±—ã—á–Ω—ã–π':'std','—Å—Ä–µ–¥–Ω–∏–π':'md','–±–æ–ª—å—à–æ–π':'lg'}; if(typeof state==='object'&&typeof apply==='function'){ state.lineHeight=map[kind]||kind||'std'; apply(); } }
  function setTracking(kind){ const map={'–æ–±—ã—á–Ω—ã–π':'0','–Ω–æ–ª—å':'0','—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π':'1','–ø–æ–ª—É—Ç–æ—Ä–Ω—ã–π':'1.5','–ø–æ–ª—Ç–æ—Ä—ã':'1.5','–¥–≤–æ–π–Ω–æ–π':'2','–¥–≤–∞':'2'}; if(typeof state==='object'&&typeof apply==='function'){ state.tracking=map[kind]||kind||'0'; apply(); } }
  function setFontFamily(kind){ const map={'–±–µ–∑ –∑–∞—Å–µ—á–µ–∫':'sans','—Å –∑–∞—Å–µ—á–∫–∞–º–∏':'serif','–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π':'mono','–º–æ–Ω–æ':'mono'}; if(typeof state==='object'&&typeof apply==='function'){ state.font=map[kind]||kind||'sans'; apply(); } }
  function toggleSub(open){ if(typeof state!=='object'||typeof apply!=='function')return; state.subOpen=(typeof open==='boolean')?open:!state.subOpen; apply(); }

  const SCROLL_STEP = ()=> Math.round(window.innerHeight * 0.85);
  let autoScrollTimer = null;
  function doScroll(px){ window.scrollBy({ top:px, behavior:'smooth' }); }
  function scrollDownScreens(n=1){ doScroll(SCROLL_STEP()*(n||1)); }
  function scrollUpScreens(n=1){ doScroll(-SCROLL_STEP()*(n||1)); }
  function scrollToTop(){ window.scrollTo({ top:0, behavior:'smooth' }); }
  function scrollToBottom(){ window.scrollTo({ top:document.documentElement.scrollHeight, behavior:'smooth' }); }
  function startAutoScroll(dir=1,speed=1){ stopAutoScroll(); const px=16*speed*(dir>0?1:-1); autoScrollTimer=setInterval(()=>window.scrollBy(0,px),16); }
  function stopAutoScroll(){ if(autoScrollTimer){ clearInterval(autoScrollTimer); autoScrollTimer=null; } }

  let paragraphMode=false, paraUtterance=null, paraText='', paraCursor=0, paraBaseOffset=0, paraPausedManually=false;
  function robustPause(retries=4){ const f=()=>{ try{speechSynthesis.pause();}catch{} if(!speechSynthesis.paused && retries-- > 0) setTimeout(f,60); }; f(); }
  function ttsPlay(){
    if(paragraphMode && paraPausedManually){ resumeParagraphFromCursor(); return; }
    if(paragraphMode && speechSynthesis.paused){ try{ speechSynthesis.resume(); paraPausedManually=false; }catch{} return; }
    const idxSel=getHighlightedParagraphIndex(); if(idxSel>=0){ readParagraphAt(idxSel); return; }
    btn.ttsPlay?.click();
  }
  function ttsPause(){
    if(paragraphMode && speechSynthesis.speaking){ paraPausedManually=true; robustPause(); try{ speechSynthesis.cancel(); }catch{} return; }
    btn.ttsPause?.click();
  }
  function ttsStop(){ if(paragraphMode){ paraPausedManually=false; try{ speechSynthesis.cancel(); }catch{} paragraphMode=false; } btn.ttsStop?.click(); }
  function clearWordHighlight(){ document.querySelectorAll('.ra-word.current').forEach(el=>el.classList.remove('current')); }

  const readRoot = (typeof window.readRoot!=='undefined' && window.readRoot) ? window.readRoot : (document.querySelector('.a11y-zoom-target') || document.querySelector('main') || document.body);
  (function addStyle(){ const st=document.createElement('style'); st.textContent='.va-paragraph-current{outline:2px dashed var(--va-mark,#888);outline-offset:6px;border-radius:8px}'; document.head.appendChild(st); })();
  const getParagraphs = () => [...readRoot.querySelectorAll('p, .content p, article p')].filter(p=>p.innerText.trim().length>0);
  let paraIndex=0, autoStopTimer=null;
  function clearParaHighlight(){ readRoot.querySelectorAll('.va-paragraph-current').forEach(el=>el.classList.remove('va-paragraph-current')); }
  function markParagraph(p){ clearParaHighlight(); if(p){ p.classList.add('va-paragraph-current'); p.scrollIntoView({block:'center', behavior:'smooth'}); } }
  function normalizeText(s){ return s.replace(/\u00A0/g,' ').replace(/[ \t]+/g,' ').replace(/\s+\n/g,'\n').trim(); }

  function bindKaraokeHandlers(p,utter,baseOffset){
    const local = normalizeText(p.innerText||'');
    const starts=[]; local.replace(/\S+/g,(_m,off)=>{ starts.push(off); return _m; });
    const spans=[...p.querySelectorAll('.ra-word')]; let cur=null;
    function highlightByChar(idx){ let lo=0,hi=starts.length-1,ans=0; while(lo<=hi){const mid=(lo+hi)>>1; if(starts[mid]<=idx){ans=mid;lo=mid+1;} else hi=mid-1;} const i=Math.max(0,Math.min(ans,spans.length-1)); if(cur)cur.classList.remove('current'); const sp=spans[i]; if(sp){ sp.classList.add('current'); cur=sp; sp.scrollIntoView({block:'center',behavior:'smooth'});} }
    utter.onboundary = (ev)=>{ if(typeof ev.charIndex==='number'){ paraCursor = baseOffset + ev.charIndex; highlightByChar(paraCursor); } };
  }

  function speakParagraphSlice(p, baseOffset){
    const full = normalizeText(p.innerText||''); const slice = full.slice(baseOffset); if(!slice) return;
    paraText=full;
    paraUtterance = new SpeechSynthesisUtterance(slice);
    paraUtterance.lang='ru-RU'; paraUtterance.rate=1.0;
    bindKaraokeHandlers(p, paraUtterance, baseOffset);
    paraUtterance.onend = ()=>{ paragraphMode=false; paraPausedManually=false; };
    paraUtterance.onerror = ()=>{ paragraphMode=false; };
    speechSynthesis.speak(paraUtterance);
  }

  function readParagraphAt(idx){
    const paras=getParagraphs(); if(!paras.length) return;
    idx=Math.max(0,Math.min(idx,paras.length-1)); paraIndex=idx;
    const p=paras[idx]; const text=normalizeText(p.innerText||''); if(!text) return;
    try{ speechSynthesis.cancel(); }catch{} btn.ttsStop?.click(); clearWordHighlight();
    markParagraph(p);
    paragraphMode=true; paraPausedManually=false; paraBaseOffset=0; paraCursor=0;
    speakParagraphSlice(p,0);
  }

  function resumeParagraphFromCursor(){
    const paras=getParagraphs(); if(!paras.length) return;
    const p=paras[paraIndex]||readRoot.querySelector('.va-paragraph-current'); if(!p) return;
    try{ speechSynthesis.cancel(); }catch{}
    paraBaseOffset=Math.max(0,Math.min(paraCursor,(paraText||'').length));
    paraPausedManually=false; paragraphMode=true;
    speakParagraphSlice(p, paraBaseOffset);
  }

  function getHighlightedParagraphIndex(){ const paras=getParagraphs(); if(!paras.length) return -1; const cur=readRoot.querySelector('.va-paragraph-current'); if(!cur) return -1; return paras.indexOf(cur); }

  const TIME_UNITS={"—Å–µ–∫—É–Ω–¥":1,"—Å–µ–∫—É–Ω–¥—ã":1,"—Å–µ–∫—É–Ω–¥–∞":1,"–º–∏–Ω—É—Ç":60,"–º–∏–Ω—É—Ç—ã":60,"–º–∏–Ω—É—Ç–∞":60};
  function extractNumberSec(q){ const m=q.match(/—á–µ—Ä–µ–∑\s+(\d{1,3})\s*(—Å–µ–∫—É–Ω–¥(?:—ã|–∞)?|–º–∏–Ω—É—Ç(?:—ã|–∞)?)?/i); if(!m) return null; const n=parseInt(m[1],10); const unit=(m[2]||'').toLowerCase(); return n*(TIME_UNITS[unit]||1); }

  function extractNumber(text){
    const m=text.match(/(\d{1,3})(?:\s*%| –ø—Ä–æ—Ü–µ–Ω—Ç| –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)?/i);
    if(m) return parseInt(m[1],10);
    for(const [k,v] of Object.entries(NUMBER_WORDS)) if(text.includes(k)) return v;
    return null;
  }
  function normalize(s){ return s.toLowerCase().replace(/[—ë]/g,'–µ').replace(/[^\p{L}\p{N}\s%]/gu,' ').replace(/\s+/g,' ').trim(); }

  let stopPendingTimer=null, stopPendingUntil=0;
  function armStopPending(){ if(stopPendingTimer) clearTimeout(stopPendingTimer); stopPendingUntil=Date.now()+1200; stopPendingTimer=setTimeout(()=>{ stopAllSpeech(); stopPendingTimer=null; stopPendingUntil=0; setStatus('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'); },1200); }
  function hasPendingStop(){ return Date.now()<stopPendingUntil; }
  function cancelPendingStop(){ if(stopPendingTimer) clearTimeout(stopPendingTimer); stopPendingTimer=null; stopPendingUntil=0; }

  function stopAllSpeech(){ try{ speechSynthesis.cancel(); }catch{} btn.ttsStop?.click(); paraUtterance=null; paraPausedManually=false; paragraphMode=false; clearWordHighlight(); }

  function isCommandPhrase(q){
    return /(—Å—Ç–æ–ø|–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å|–ø–∞—É–∑–∞|–ø—Ä–æ–¥–æ–ª–∂–∏|—á–∏—Ç–∞–π|–ø—Ä–æ—á–∏—Ç–∞–π|–æ–∑–≤—É—á—å|—Å–Ω–∞—á–∞–ª–∞|—Å –Ω–∞—á–∞–ª–∞|—Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞|–Ω–∞—á–∞–ª–æ|–ø—Ä–æ–ø—É—Å—Ç–∏ –∞–±–∑–∞—Ü|—Å–ª–µ–¥—É—é—â–∏–π –∞–±–∑–∞—Ü|–ø—Ä–æ—à–ª—ã–π –∞–±–∑–∞—Ü|–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–±–∑–∞—Ü|–≤–≤–µ—Ä—Ö|–≤–Ω–∏–∑|–ø—Ä–æ–∫—Ä—É—Ç|–º–∞—Å—à—Ç–∞–±|—à—Ä–∏—Ñ—Ç|—Ç–µ–º–∞|–∫–∞—Ä—Ç–∏–Ω|–∏–∑–æ–±—Ä–∞–∂–µ–Ω|–∫–æ–Ω—Ç—Ä–∞—Å—Ç|—Å–µ–ø–∏—è|—Ç–µ–º–Ω|—Å–≤–µ—Ç–ª|–Ω–∞ –≥–ª–∞–≤–Ω—É—é|–Ω–∞–∑–∞–¥|–¥–æ–º–æ–π)/.test(q);
  }

  function handleCommand(raw){
    const q = normalize(raw);
    const finish = (msg)=>{ setStatus(msg); return msg; };

    if (/^(—á–∏—Ç–∞–π|—á–∏—Ç–∞—Ç—å) —Å –Ω–∞—á–∞–ª–∞$|^—Å–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–π$|^–æ–∑–≤—É—á—å –Ω–∞—á–∞–ª[–æ–∞]$/.test(q)){
      cancelPendingStop(); clearParaHighlight(); clearWordHighlight();
      paragraphMode=false; paraPausedManually=false; ttsStop(); ttsPlay();
      return finish('–ß—Ç–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞');
    }

    if (/^(—á–∏—Ç–∞–π|—á–∏—Ç–∞—Ç—å) —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞$|^–ø—Ä–æ–¥–æ–ª–∂–∏ —á—Ç–µ–Ω–∏–µ$/.test(q)){
      cancelPendingStop();
      if (paragraphMode && (paraPausedManually || speechSynthesis.paused)){ ttsPlay(); return finish('–ê–±–∑–∞—Ü: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'); }
      const idx=getHighlightedParagraphIndex(); if(idx>=0){ readParagraphAt(idx); return finish('–ß—Ç–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞'); }
      clearParaHighlight(); ttsPlay(); return finish('–ß—Ç–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞');
    }

    if (/^(–ø—Ä–æ–ø—É—Å—Ç–∏ –∞–±–∑–∞—Ü|—Å–ª–µ–¥—É—é—â–∏–π –∞–±–∑–∞—Ü)$/.test(q)){
      cancelPendingStop(); const paras=getParagraphs(); if(!paras.length) return finish('–ù–µ—Ç –∞–±–∑–∞—Ü–µ–≤');
      const hasCur=!!readRoot.querySelector('.va-paragraph-current'); paraIndex=hasCur?Math.min(paraIndex+1,paras.length-1):0;
      paraPausedManually=false; readParagraphAt(paraIndex);
      return finish(`–ê–±–∑–∞—Ü ${paraIndex+1}/${paras.length}`);
    }

    if (/^(–ø—Ä–æ—à–ª—ã–π –∞–±–∑–∞—Ü|–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–±–∑–∞—Ü)$/.test(q)){
      cancelPendingStop(); const paras=getParagraphs(); if(!paras.length) return finish('–ù–µ—Ç –∞–±–∑–∞—Ü–µ–≤');
      const hasCur=!!readRoot.querySelector('.va-paragraph-current'); paraIndex=hasCur?Math.max(paraIndex-1,0):0;
      paraPausedManually=false; readParagraphAt(paraIndex);
      return finish(`–ê–±–∑–∞—Ü ${paraIndex+1}/${paras.length}`);
    }

    if (/^–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å —á–µ—Ä–µ–∑\b/.test(q)){
      const sec=extractNumberSec(q); if(!sec) return finish('–ù–µ –ø–æ–Ω—è–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª');
      cancelPendingStop(); if(autoStopTimer){ clearTimeout(autoStopTimer); autoStopTimer=null; }
      autoStopTimer=setTimeout(()=>{ stopAllSpeech(); clearParaHighlight(); setStatus('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —Ç–∞–π–º–µ—Ä—É'); }, sec*1000);
      return finish(`–û—Å—Ç–∞–Ω–æ–≤–ª—é—Å—å —á–µ—Ä–µ–∑ ${sec} —Å–µ–∫`);
    }
    if (/^—á–µ—Ä–µ–∑\s+\d/.test(q) && hasPendingStop()){
      const sec=extractNumberSec('–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å '+q); cancelPendingStop(); if(!sec) return finish('–ù–µ –ø–æ–Ω—è–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª');
      if(autoStopTimer){ clearTimeout(autoStopTimer); autoStopTimer=null; }
      autoStopTimer=setTimeout(()=>{ stopAllSpeech(); clearParaHighlight(); setStatus('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —Ç–∞–π–º–µ—Ä—É'); }, sec*1000);
      return finish(`–û—Å—Ç–∞–Ω–æ–≤–ª—é—Å—å —á–µ—Ä–µ–∑ ${sec} —Å–µ–∫`);
    }

    if (/^(–æ–∑–≤—É—á(—å|–∏—Ç—å)|–ø—Ä–æ—á–∏—Ç–∞–π|–ø—Ä–æ—á–µ—Å—Ç—å)$/.test(q)){
      cancelPendingStop();
      if (paragraphMode && (paraPausedManually || speechSynthesis.paused)){ ttsPlay(); return finish('–ê–±–∑–∞—Ü: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'); }
      const idx=getHighlightedParagraphIndex(); if(idx>=0){ readParagraphAt(idx); return finish('–ß—Ç–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞'); }
      clearParaHighlight(); clearWordHighlight(); paragraphMode=false; paraPausedManually=false; ttsPlay(); return finish('–û–∑–≤—É—á–∫–∞: —Å—Ç–∞—Ä—Ç');
    }
    if (/–ø–∞—É–∑–∞|–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏/.test(q)){ cancelPendingStop(); ttsPause(); return finish('–ü–∞—É–∑–∞'); }
    if (/^(—Å—Ç–æ–ø|–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å)$/.test(q)){ armStopPending(); return finish('–ñ–¥—É —É—Ç–æ—á–Ω–µ–Ω–∏—è‚Ä¶'); }
    if (/(^—Å—Ç–æ–ø\b|^–æ—Å—Ç–∞–Ω–æ–≤–∏(?!—Å—å —á–µ—Ä–µ–∑)|^–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å(?! —á–µ—Ä–µ–∑))/.test(q)){ cancelPendingStop(); stopAllSpeech(); clearParaHighlight(); return finish('–û–∑–≤—É—á–∫–∞: —Å—Ç–æ–ø'); }

    if (/(—É–≤–µ–ª–∏—á(—å|–∏)|–±–æ–ª—å—à–µ).*(—à—Ä–∏—Ñ—Ç|—Ç–µ–∫—Å—Ç)|—à—Ä–∏—Ñ—Ç (–±–æ–ª—å—à–µ|–ø—Ä–∏–±–∞–≤—å|–ø–ª—é—Å)/.test(q)) return finish(nudgeFont(+0.05),'–®—Ä–∏—Ñ—Ç +');
    if (/(—É–º–µ–Ω—å—à(–∏|—å)|–º–µ–Ω—å—à–µ).*(—à—Ä–∏—Ñ—Ç|—Ç–µ–∫—Å—Ç)|—à—Ä–∏—Ñ—Ç (–º–µ–Ω—å—à–µ|—É–±–∞–≤—å|–º–∏–Ω—É—Å)/.test(q)) return finish(nudgeFont(-0.05),'–®—Ä–∏—Ñ—Ç ‚àí');
    if (/—Å–±—Ä–æ—Å(–∏—Ç—å)? (–º–∞—Å—à—Ç–∞–±|—à—Ä–∏—Ñ—Ç)|–≤–µ—Ä–Ω–∏ (–º–∞—Å—à—Ç–∞–±|—à—Ä–∏—Ñ—Ç) (1|–æ–¥–∏–Ω)/.test(q)||/—à—Ä–∏—Ñ—Ç 100/.test(q)) { setFontScale(1); return finish('–°–±—Ä–æ—Å —à—Ä–∏—Ñ—Ç–∞'); }
    if (/(—à—Ä–∏—Ñ—Ç|–º–∞—Å—à—Ç–∞–±|–∑—É–º)/.test(q)){ const n=extractNumber(q); if(n&&n>=50&&n<=300){ setFontScale(n/100); return finish(`–®—Ä–∏—Ñ—Ç ${n}%`);} }

    if (/(—Ç–µ–º–Ω–∞—è|—Ç—ë–º–Ω–∞—è) —Ç–µ–º–∞|–Ω–æ—á–Ω(–∞—è|–æ–π)/.test(q)) { setTheme('dark'); return finish('–¢–µ–º–∞: —Ç—ë–º–Ω–∞—è'); }
    if (/—Å–∏–Ω(—è—è|–µ-—Ç–µ–º–Ω–∞—è|–µ —Ç–µ–º–Ω–∞—è) —Ç–µ–º–∞|—Å–∏–Ω–µ.*—Ç–µ–º–Ω/.test(q)) { setTheme('blue'); return finish('–¢–µ–º–∞: —Å–∏–Ω—è—è/—Ç—ë–º–Ω–∞—è'); }
    if (/—Å–µ–ø–∏—è/.test(q)) { setTheme('sepia'); return finish('–¢–µ–º–∞: —Å–µ–ø–∏—è'); }
    if (/–∫–æ–Ω—Ç—Ä–∞—Å—Ç(–Ω–∞—è)?/.test(q)) { setTheme('contrast'); return finish('–¢–µ–º–∞: –∫–æ–Ω—Ç—Ä–∞—Å—Ç'); }
    if (/(–æ–±—ã—á–Ω|—Å–≤–µ—Ç–ª(–∞—è|–∞—è —Ç–µ–º–∞)|–¥–µ—Ñ–æ–ª—Ç|—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞)/.test(q)) { setTheme('default'); return finish('–¢–µ–º–∞: –æ–±—ã—á–Ω–∞—è'); }

    if (/(–≤–∫–ª—é—á–∏|–ø–æ–∫–∞–∂–∏).*(–∫–∞—Ä—Ç–∏–Ω–∫|–∏–∑–æ–±—Ä–∞–∂–µ–Ω)/.test(q)) { setImages(true); return finish('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –í–ö–õ'); }
    if (/(–≤—ã–∫–ª—é—á–∏|—Å–∫—Ä–æ–π).*(–∫–∞—Ä—Ç–∏–Ω–∫|–∏–∑–æ–±—Ä–∞–∂–µ–Ω)/.test(q)) { setImages(false); return finish('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –í–´–ö–õ'); }

    if (/–º–µ–∂(–¥—É)?—Å—Ç—Ä–æ—á–Ω(—ã–π|—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)?.*(–±–æ–ª—å—à–æ–π)/.test(q)) { setLineHeight('lg'); return finish('–ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π: –±–æ–ª—å—à–æ–π'); }
    if (/–º–µ–∂(–¥—É)?—Å—Ç—Ä–æ—á–Ω(—ã–π)?.*(—Å—Ä–µ–¥–Ω)/.test(q)) { setLineHeight('md'); return finish('–ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π: —Å—Ä–µ–¥–Ω–∏–π'); }
    if (/–º–µ–∂(–¥—É)?—Å—Ç—Ä–æ—á–Ω(—ã–π)?.*(—Å—Ç–∞–Ω–¥–∞—Ä—Ç|–æ–±—ã—á–Ω)/.test(q)) { setLineHeight('std'); return finish('–ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'); }
    if (/–º–µ–∂–±—É–∫–≤–µ–Ω–Ω(—ã–π)?.*(–¥–≤–æ–π–Ω|–¥–≤–∞)/.test(q)) { setTracking('2'); return finish('–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π: –¥–≤–æ–π–Ω–æ–π'); }
    if (/–º–µ–∂–±—É–∫–≤–µ–Ω–Ω(—ã–π)?.*(–ø–æ–ª—É—Ç–æ—Ä|–ø–æ–ª—Ç–æ—Ä—ã)/.test(q)) { setTracking('1.5'); return finish('–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π: –ø–æ–ª—É—Ç–æ—Ä–Ω—ã–π'); }
    if (/–º–µ–∂–±—É–∫–≤–µ–Ω–Ω(—ã–π)?.*(—É–≤–µ–ª–∏—á–µ–Ω|–±–æ–ª—å—à–µ)/.test(q)) { setTracking('1'); return finish('–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π: —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π'); }
    if (/–º–µ–∂–±—É–∫–≤–µ–Ω–Ω(—ã–π)?.*(–æ–±—ã—á–Ω|—Å—Ç–∞–Ω–¥–∞—Ä—Ç)/.test(q)) { setTracking('0'); return finish('–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π: –æ–±—ã—á–Ω—ã–π'); }
    if (/—à—Ä–∏—Ñ—Ç.*–±–µ–∑ –∑–∞—Å–µ—á/.test(q)||/—Å–∞–Ω—Å|sans/.test(q)) { setFontFamily('–±–µ–∑ –∑–∞—Å–µ—á–µ–∫'); return finish('–®—Ä–∏—Ñ—Ç: –±–µ–∑ –∑–∞—Å–µ—á–µ–∫'); }
    if (/—à—Ä–∏—Ñ—Ç.*—Å –∑–∞—Å–µ—á/.test(q)||/—Å–µ—Ä–∏—Ñ|serif/.test(q)) { setFontFamily('—Å –∑–∞—Å–µ—á–∫–∞–º–∏'); return finish('–®—Ä–∏—Ñ—Ç: —Å –∑–∞—Å–µ—á–∫–∞–º–∏'); }
    if (/–º–æ–Ω–æ(—à–∏—Ä–∏–Ω–Ω)?|mono/.test(q)) { setFontFamily('–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π'); return finish('–®—Ä–∏—Ñ—Ç: –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π'); }

    if (/(–ø–æ–∫–∞–∑–∞—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å).*–¥–æ–ø(–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)?/.test(q)) { toggleSub(true); return finish('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—Ç–∫—Ä—ã—Ç–æ'); }
    if (/(—Å–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å).*–¥–æ–ø(–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)?/.test(q)) { toggleSub(false); return finish('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∑–∞–∫—Ä—ã—Ç–æ'); }
    if (/(–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å|–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)/.test(q)) { toggleSub(); return finish('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ'); }

    if (/(–≤ —Å–∞–º—ã–π –Ω–∏–∑|–≤ –∫–æ–Ω–µ—Ü|–≤–Ω–∏–∑ –¥–æ –∫–æ–Ω—Ü–∞)/.test(q)) { scrollToBottom(); return finish('–°–∫—Ä–æ–ª–ª: –≤ —Å–∞–º—ã–π –Ω–∏–∑'); }
    if (/(–≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö|–Ω–∞–≤–µ—Ä—Ö|–≤ –Ω–∞—á–∞–ª–æ)/.test(q)) { scrollToTop(); return finish('–°–∫—Ä–æ–ª–ª: –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö'); }
    if (/(–∞–≤—Ç–æ|–ø–ª–∞–≤–Ω–æ).*(–ø—Ä–æ–∫—Ä—É—Ç|—Å–∫—Ä–æ–ª–ª).*(–≤–Ω–∏–∑)/.test(q)) { startAutoScroll(+1,1); return finish('–ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑'); }
    if (/(–∞–≤—Ç–æ|–ø–ª–∞–≤–Ω–æ).*(–ø—Ä–æ–∫—Ä—É—Ç|—Å–∫—Ä–æ–ª–ª).*(–≤–≤–µ—Ä—Ö)/.test(q)) { startAutoScroll(-1,1); return finish('–ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö'); }
    if (/(—Å—Ç–æ–ø|–æ—Å—Ç–∞–Ω–æ–≤–∏).*(–ø—Ä–æ–∫—Ä—É—Ç|—Å–∫—Ä–æ–ª–ª)/.test(q)) { stopAutoScroll(); return finish('–ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª: —Å—Ç–æ–ø'); }
    if (/(–≤–Ω–∏–∑|–ø—Ä–æ–∫—Ä—É—Ç(–∏|–∫–∞) –≤–Ω–∏–∑)/.test(q)){ const n=extractNumber(q); if(/%|–ø—Ä–æ—Ü–µ–Ω—Ç/.test(q)&&n){ doScroll(Math.round(innerHeight*(n/100))); return finish(`–°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –Ω–∞ ${n}%`);} scrollDownScreens(n||1); return finish(`–°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –Ω–∞ ${(n||1)} —ç–∫—Ä–∞–Ω(–∞)`); }
    if (/(–≤–≤–µ—Ä—Ö|–ø—Ä–æ–∫—Ä—É—Ç(–∏|–∫–∞) –≤–≤–µ—Ä—Ö)/.test(q)){ const n=extractNumber(q); if(/%|–ø—Ä–æ—Ü–µ–Ω—Ç/.test(q)&&n){ doScroll(-Math.round(innerHeight*(n/100))); return finish(`–°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –Ω–∞ ${n}%`);} scrollUpScreens(n||1); return finish(`–°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –Ω–∞ ${(n||1)} —ç–∫—Ä–∞–Ω(–∞)`); }

    if (/(–Ω–∞–∑–∞–¥|–≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥|—à–∞–≥ –Ω–∞–∑–∞–¥)/.test(q)) { if(history.length>1) history.back(); else location.assign((location.origin||'/')+'/'); return finish('–ù–∞–≤–∏–≥–∞—Ü–∏—è: –Ω–∞–∑–∞–¥'); }
    if (/(–≤–ø–µ—Ä–µ–¥|–≤–ø–µ—Ä—ë–¥)($| –ø–æ –∏—Å—Ç–æ—Ä–∏–∏)/.test(q)) { history.forward(); return finish('–ù–∞–≤–∏–≥–∞—Ü–∏—è: –≤–ø–µ—Ä—ë–¥'); }
    if (/(–Ω–∞ –≥–ª–∞–≤–Ω—É—é|–¥–æ–º–æ–π|–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)/.test(q)) { location.assign((location.origin||'/')+'/'); return finish('–ù–∞–≤–∏–≥–∞—Ü–∏—è: –Ω–∞ –≥–ª–∞–≤–Ω—É—é'); }

    if (/–≤–µ—Ä–Ω–∏ .*–º–∞—Å—à—Ç–∞–±.*(1|–æ–¥–∏–Ω)/.test(q)) { setFontScale(1); return finish('–ú–∞—Å—à—Ç–∞–± = 1'); }
    if (/–∑—É–º|–º–∞—Å—à—Ç–∞–±/.test(q)){ const n=extractNumber(q); if(n&&n>=50&&n<=300){ setFontScale(n/100); return finish(`–ú–∞—Å—à—Ç–∞–± ${n}%`);} }

    return finish('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞');
  }

  const rec = new SpeechRec();
  rec.lang='ru-RU'; rec.continuous=true; rec.interimResults=false; rec.maxAlternatives=1;

  const toggleBtn = $('#va-toggle');
  let active=false, restarting=false, lastHeardTs=Date.now();

  function restartRecognition(reason){
    if(!active||restarting) return;
    restarting=true; log('SR restart:', reason);
    try{ (typeof rec.abort==='function')?rec.abort():rec.stop(); }catch{}
    setTimeout(()=>{ try{ rec.start(); setStatus('–°–ª—É—à–∞—é‚Ä¶'); lastHeardTs=Date.now(); }catch(e){ setStatus('–û–∂–∏–¥–∞–Ω–∏–µ‚Ä¶'); log('SR start failed',e);} finally{ restarting=false; }},800);
  }

  function startRec(){ if(active) return; try{ rec.start(); active=true; toggleBtn&&(toggleBtn.textContent='üéô –í–´–ö–õ'); setStatus('–°–ª—É—à–∞—é‚Ä¶'); lastHeardTs=Date.now(); }catch(e){ setStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞'); log('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:',e); } }
  function stopRec(){ if(!active) return; try{ rec.stop(); }catch{} active=false; restarting=false; toggleBtn&&(toggleBtn.textContent='üéô –í–ö–õ'); setStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ'); stopAutoScroll(); cancelPendingStop(); }

  toggleBtn?.addEventListener('click', ()=>{ active?stopRec():startRec(); });
  window.addEventListener('keydown', e=>{ if(e.altKey && (e.key.toLowerCase()==='g')){ e.preventDefault(); active?stopRec():startRec(); } }, {passive:false});

  const WATCHDOG_MS=15000;
  setInterval(()=>{ if(active && (Date.now()-lastHeardTs>WATCHDOG_MS)) restartRecognition('watchdog idle'); },4000);
  document.addEventListener('visibilitychange', ()=>{ if(document.visibilityState==='visible' && active) restartRecognition('tab visible'); });

  rec.onresult = (ev)=>{
    for(let i=ev.resultIndex;i<ev.results.length;i++){
      const res=ev.results[i];
      if(res.isFinal){
        lastHeardTs=Date.now();
        const phrase=res[0].transcript.trim();
        const norm = normalize(phrase);
        const short = norm.split(' ').length <= 6;
        if (speechSynthesis.speaking && !speechSynthesis.paused){
          if (!(short || isCommandPhrase(norm))){ log('echo muted:', phrase); continue; }
        }
        log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', `"${phrase}"`);
        handleCommand(phrase);
      }
    }
  };
  rec.onerror = (ev)=>{ setStatus('–û—à–∏–±–∫–∞: ' + (ev.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')); log('onerror:', ev.error || ev); if(active && ['no-speech','aborted','network'].includes(ev.error||'')){ restartRecognition('onerror '+ev.error); } };
  rec.onend = ()=>{ log('onend; active=',active,'restarting=',restarting); if(active) restartRecognition('onend'); };

  log('–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
})();