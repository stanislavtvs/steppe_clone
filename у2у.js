(function(){
  const SpeechRec = window.SpeechRecognition || window.webkitSpeechRecognition;
  const supported = !!SpeechRec;

  const DEBUG = true;
  const log = (...a)=>{ if(DEBUG) console.log('[VA]', ...a); };
  const group = (t)=>{ if(DEBUG) console.groupCollapsed('[VA]', t); };
  const end = ()=>{ if(DEBUG) console.groupEnd(); };

  const NUMBER_WORDS = {
    "–Ω–æ–ª—å": 0, "–ø—è—Ç—å–¥–µ—Å—è—Ç": 50, "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç": 60, "—Å–µ–º—å–¥–µ—Å—è—Ç": 70,
    "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç": 80, "–¥–µ–≤—è–Ω–æ—Å—Ç–æ": 90, "—Å—Ç–æ": 100, "—Å—Ç–æ –¥–µ—Å—è—Ç—å": 110,
    "—Å—Ç–æ –¥–≤–∞–¥—Ü–∞—Ç—å": 120, "—Å—Ç–æ —Ç—Ä–∏–¥—Ü–∞—Ç—å": 130, "—Å—Ç–æ —Å–æ—Ä–æ–∫": 140,
    "—Å—Ç–æ –ø—è—Ç—å–¥–µ—Å—è—Ç": 150, "—Å—Ç–æ —à–µ—Å—Ç—å–¥–µ—Å—è—Ç": 160, "—Å—Ç–æ —Å–µ–º—å–¥–µ—Å—è—Ç": 170,
    "—Å—Ç–æ –≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç": 180, "—Å—Ç–æ –¥–µ–≤—è–Ω–æ—Å—Ç–æ": 190, "–¥–≤–µ—Å—Ç–∏": 200
  };
  group('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —á–∏—Å–ª–æ–≤—ã–µ —Å–ª–æ–≤–∞');
  Object.entries(NUMBER_WORDS).forEach(([k,v])=>console.log(`${k} ‚Üí ${v}`));
  end();

  const hostBar = (typeof bar !== 'undefined' && bar) ? bar : document.querySelector('.a11y-bar');
  if (!hostBar) { log('–ü–∞–Ω–µ–ª—å .a11y-bar –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); return; }

  const voiceGroup = document.createElement('div');
  voiceGroup.className = 'a11y-group';
  voiceGroup.innerHTML = `
    <span class="a11y-title">–ì–æ–ª–æ—Å</span>
    <button class="a11y-btn" id="va-toggle" title="Alt+G">${supported ? 'üéô –í–ö–õ' : 'üö´ –ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏'}</button>
    <div class="a11y-chip" id="va-status" style="min-width:120px;text-align:center">${supported ? '–û—Ç–∫–ª—é—á–µ–Ω–æ' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}</div>
  `;
  hostBar.querySelector('.a11y-row')?.appendChild(voiceGroup);

  const navGroup = document.createElement('div');
  navGroup.className = 'a11y-group';
  navGroup.innerHTML = `
    <span class="a11y-title">–ù–∞–≤–∏–≥–∞—Ü–∏—è</span>
    <button class="a11y-btn" id="va-back" title="–ù–∞–∑–∞–¥">‚óÄ –ù–∞–∑–∞–¥</button>
    <button class="a11y-btn" id="va-home" title="–î–æ–º–æ–π">üè† –î–æ–º–æ–π</button>
  `;
  hostBar.querySelector('.a11y-row')?.appendChild(navGroup);

  const $ = sel => hostBar.querySelector(sel);
  $('#va-back')?.addEventListener('click', ()=>{
    if (history.length > 1) history.back();
    else location.assign((location.origin || '/') + '/');
  });
  $('#va-home')?.addEventListener('click', ()=>{
    location.assign((location.origin || '/') + '/');
  });

  if (!supported) return;

  const btn = {
    fsInc: $('#fs-inc'), fsDec: $('#fs-dec'), fsReset: $('#fs-reset'),
    imgOn: $('#img-on'), imgOff: $('#img-off'),
    ttsPlay: $('#tts-play'), ttsPause: $('#tts-pause'), ttsStop: $('#tts-stop'),
    toggleSub: $('#toggle-sub'),
    lhStd: $('#lh-std'), lhMd: $('#lh-md'), lhLg: $('#lh-lg'),
    tr0: $('#tr-0'), tr1: $('#tr-1'), tr15: $('#tr-15'), tr2: $('#tr-2'),
    fSans: $('#f-sans'), fSerif: $('#f-serif'), fMono: $('#f-mono')
  };

  function setFontScale(scale){
    if (typeof state !== 'object') return;
    const s = Math.max(0.5, Math.min(3, Number(scale) || 1));
    state.fontScale = +s.toFixed(3);
    if (typeof apply === 'function') apply();
  }
  function nudgeFont(delta){
    if (btn.fsInc && btn.fsDec){
      (delta > 0 ? btn.fsInc : btn.fsDec).click();
    } else if (typeof state === 'object' && typeof apply === 'function'){
      state.fontScale = +(state.fontScale + delta).toFixed(3);
      apply();
    }
  }
  function setTheme(name){
    if (typeof state !== 'object' || typeof apply !== 'function') return;
    const map = { 'default':'default','–æ–±—ã—á–Ω–∞—è':'default','—Å–≤–µ—Ç–ª–∞—è':'default','—Ç—ë–º–Ω–∞—è':'dark','—Ç–µ–º–Ω–∞—è':'dark','—Å–∏–Ω—è—è':'blue','—Å–∏–Ω–µ-—Ç—ë–º–Ω–∞—è':'blue','—Å–µ–ø–∏—è':'sepia','–∫–æ–Ω—Ç—Ä–∞—Å—Ç':'contrast','–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è':'contrast' };
    state.theme = map[name] || name || 'default'; apply();
  }
  function setImages(on){ if(typeof state==='object'&&typeof apply==='function'){ state.images = on?'on':'off'; apply(); } }
  function setLineHeight(kind){
    const map = { '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π':'std','–æ–±—ã—á–Ω—ã–π':'std','—Å—Ä–µ–¥–Ω–∏–π':'md','–±–æ–ª—å—à–æ–π':'lg' };
    if(typeof state==='object'&&typeof apply==='function'){ state.lineHeight = map[kind]||kind||'std'; apply(); }
  }
  function setTracking(kind){
    const map = { '–æ–±—ã—á–Ω—ã–π':'0','–Ω–æ–ª—å':'0','—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π':'1','–ø–æ–ª—É—Ç–æ—Ä–Ω—ã–π':'1.5','–ø–æ–ª—Ç–æ—Ä—ã':'1.5','–¥–≤–æ–π–Ω–æ–π':'2','–¥–≤–∞':'2' };
    if(typeof state==='object'&&typeof apply==='function'){ state.tracking = map[kind]||kind||'0'; apply(); }
  }
  function setFontFamily(kind){
    const map = { '–±–µ–∑ –∑–∞—Å–µ—á–µ–∫':'sans','—Å –∑–∞—Å–µ—á–∫–∞–º–∏':'serif','–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π':'mono','–º–æ–Ω–æ':'mono' };
    if(typeof state==='object'&&typeof apply==='function'){ state.font = map[kind]||kind||'sans'; apply(); }
  }
  function toggleSub(open){
    if(typeof state!=='object'||typeof apply!=='function') return;
    state.subOpen = (typeof open==='boolean') ? open : !state.subOpen; apply();
  }

  const SCROLL_STEP = ()=> Math.round(window.innerHeight * 0.85);
  let autoScrollTimer = null;

  function doScroll(px){ window.scrollBy({ top: px, behavior: 'smooth' }); }
  function scrollDownScreens(n=1){ doScroll( SCROLL_STEP() * (n||1) ); }
  function scrollUpScreens(n=1){ doScroll( -SCROLL_STEP() * (n||1) ); }
  function scrollToTop(){ window.scrollTo({ top: 0, behavior: 'smooth' }); }
  function scrollToBottom(){ window.scrollTo({ top: document.documentElement.scrollHeight, behavior: 'smooth' }); }
  function startAutoScroll(dir=1, speed=1){
    stopAutoScroll();
    const pxPerTick = 16 * speed * (dir>0 ? 1 : -1);
    autoScrollTimer = setInterval(()=> window.scrollBy(0, pxPerTick), 16);
  }
  function stopAutoScroll(){ if (autoScrollTimer){ clearInterval(autoScrollTimer); autoScrollTimer=null; } }

  function ttsPlay(){ btn.ttsPlay?.click(); }
  function ttsPause(){ btn.ttsPause?.click(); }
  function ttsStop(){ btn.ttsStop?.click(); }

  function extractNumber(text){
    group('extractNumber'); console.log('–≤—Ö–æ–¥:', text);
    const m = text.match(/(\d{1,3})(?:\s*%| –ø—Ä–æ—Ü–µ–Ω—Ç| –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)?/i);
    if (m){ const val = parseInt(m[1],10); console.log('–Ω–∞–π–¥–µ–Ω—ã —Ü–∏—Ñ—Ä—ã ‚Üí', val); end(); return val; }
    for (const [k,v] of Object.entries(NUMBER_WORDS)){
      if (text.includes(k)){ console.log(`–Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ–º: "${k}" ‚Üí`, v); end(); return v; }
    }
    console.log('—á–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'); end(); return null;
  }

  function normalize(s){
    return s.toLowerCase()
      .replace(/[—ë]/g,'–µ')
      .replace(/[^\p{L}\p{N}\s%]/gu,' ')
      .replace(/\s+/g,' ')
      .trim();
  }

  function handleCommand(raw){
    group('handleCommand'); console.log('—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞:', raw);
    const q = normalize(raw); console.log('–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ:', q);
    const finish = (msg)=>{ console.log('–¥–µ–π—Å—Ç–≤–∏–µ:', msg); end(); return msg; };

    if (/(—É–≤–µ–ª–∏—á(—å|–∏)|–±–æ–ª—å—à–µ).*(—à—Ä–∏—Ñ—Ç|—Ç–µ–∫—Å—Ç)|—à—Ä–∏—Ñ—Ç (–±–æ–ª—å—à–µ|–ø—Ä–∏–±–∞–≤—å|–ø–ª—é—Å)/.test(q)) { nudgeFont(+0.05); return finish('–®—Ä–∏—Ñ—Ç +'); }
    if (/(—É–º–µ–Ω—å—à(–∏|—å)|–º–µ–Ω—å—à–µ).*(—à—Ä–∏—Ñ—Ç|—Ç–µ–∫—Å—Ç)|—à—Ä–∏—Ñ—Ç (–º–µ–Ω—å—à–µ|—É–±–∞–≤—å|–º–∏–Ω—É—Å)/.test(q)) { nudgeFont(-0.05); return finish('–®—Ä–∏—Ñ—Ç ‚àí'); }
    if (/—Å–±—Ä–æ—Å(–∏—Ç—å)? (–º–∞—Å—à—Ç–∞–±|—à—Ä–∏—Ñ—Ç)|–≤–µ—Ä–Ω–∏ (–º–∞—Å—à—Ç–∞–±|—à—Ä–∏—Ñ—Ç) (1|–æ–¥–∏–Ω)/.test(q) || /—à—Ä–∏—Ñ—Ç 100/.test(q)) { setFontScale(1); return finish('–°–±—Ä–æ—Å —à—Ä–∏—Ñ—Ç–∞'); }
    if (/(—à—Ä–∏—Ñ—Ç|–º–∞—Å—à—Ç–∞–±|–∑—É–º)/.test(q)){
      const n = extractNumber(q);
      if (n && n >= 50 && n <= 300){ setFontScale(n/100); return finish(`–®—Ä–∏—Ñ—Ç ${n}%`); }
    }

    if (/(—Ç–µ–º–Ω–∞—è|—Ç—ë–º–Ω–∞—è) —Ç–µ–º–∞|–Ω–æ—á–Ω(–∞—è|–æ–π)/.test(q)) { setTheme('dark'); return finish('–¢–µ–º–∞: —Ç—ë–º–Ω–∞—è'); }
    if (/—Å–∏–Ω(—è—è|–µ-—Ç–µ–º–Ω–∞—è|–µ —Ç–µ–º–Ω–∞—è) —Ç–µ–º–∞|—Å–∏–Ω–µ.*—Ç–µ–º–Ω/.test(q)) { setTheme('blue'); return finish('–¢–µ–º–∞: —Å–∏–Ω—è—è/—Ç—ë–º–Ω–∞—è'); }
    if (/—Å–µ–ø–∏—è/.test(q)) { setTheme('sepia'); return finish('–¢–µ–º–∞: —Å–µ–ø–∏—è'); }
    if (/–∫–æ–Ω—Ç—Ä–∞—Å—Ç(–Ω–∞—è)?/.test(q)) { setTheme('contrast'); return finish('–¢–µ–º–∞: –∫–æ–Ω—Ç—Ä–∞—Å—Ç'); }
    if (/(–æ–±—ã—á–Ω|—Å–≤–µ—Ç–ª(–∞—è|–∞—è —Ç–µ–º–∞)|–¥–µ—Ñ–æ–ª—Ç|—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞)/.test(q)) { setTheme('default'); return finish('–¢–µ–º–∞: –æ–±—ã—á–Ω–∞—è'); }

    if (/(–≤–∫–ª—é—á–∏|–ø–æ–∫–∞–∂–∏).*(–∫–∞—Ä—Ç–∏–Ω–∫|–∏–∑–æ–±—Ä–∞–∂–µ–Ω)/.test(q)) { setImages(true); return finish('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –í–ö–õ'); }
    if (/(–≤—ã–∫–ª—é—á–∏|—Å–∫—Ä–æ–π).*(–∫–∞—Ä—Ç–∏–Ω–∫|–∏–∑–æ–±—Ä–∞–∂–µ–Ω)/.test(q)) { setImages(false); return finish('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –í–´–ö–õ'); }

    if (/–º–µ–∂(–¥—É)?—Å—Ç—Ä–æ—á–Ω(—ã–π|—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)?.*(–±–æ–ª—å—à–æ–π)/.test(q)) { setLineHeight('lg'); return finish('–ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π: –±–æ–ª—å—à–æ–π'); }
    if (/–º–µ–∂(–¥—É)?—Å—Ç—Ä–æ—á–Ω(—ã–π)?.*(—Å—Ä–µ–¥–Ω)/.test(q)) { setLineHeight('md'); return finish('–ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π: —Å—Ä–µ–¥–Ω–∏–π'); }
    if (/–º–µ–∂(–¥—É)?—Å—Ç—Ä–æ—á–Ω(—ã–π)?.*(—Å—Ç–∞–Ω–¥–∞—Ä—Ç|–æ–±—ã—á–Ω)/.test(q)) { setLineHeight('std'); return finish('–ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'); }
    if (/–º–µ–∂–±—É–∫–≤–µ–Ω–Ω(—ã–π)?.*(–¥–≤–æ–π–Ω|–¥–≤–∞)/.test(q)) { setTracking('2'); return finish('–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π: –¥–≤–æ–π–Ω–æ–π'); }
    if (/–º–µ–∂–±—É–∫–≤–µ–Ω–Ω(—ã–π)?.*(–ø–æ–ª—É—Ç–æ—Ä|–ø–æ–ª—Ç–æ—Ä—ã)/.test(q)) { setTracking('1.5'); return finish('–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π: –ø–æ–ª—É—Ç–æ—Ä–Ω—ã–π'); }
    if (/–º–µ–∂–±—É–∫–≤–µ–Ω–Ω(—ã–π)?.*(—É–≤–µ–ª–∏—á–µ–Ω|–±–æ–ª—å—à–µ)/.test(q)) { setTracking('1'); return finish('–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π: —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π'); }
    if (/–º–µ–∂–±—É–∫–≤–µ–Ω–Ω(—ã–π)?.*(–æ–±—ã—á–Ω|—Å—Ç–∞–Ω–¥–∞—Ä—Ç)/.test(q)) { setTracking('0'); return finish('–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π: –æ–±—ã—á–Ω—ã–π'); }
    if (/—à—Ä–∏—Ñ—Ç.*–±–µ–∑ –∑–∞—Å–µ—á/.test(q) || /—Å–∞–Ω—Å|sans/.test(q)) { setFontFamily('–±–µ–∑ –∑–∞—Å–µ—á–µ–∫'); return finish('–®—Ä–∏—Ñ—Ç: –±–µ–∑ –∑–∞—Å–µ—á–µ–∫'); }
    if (/—à—Ä–∏—Ñ—Ç.*—Å –∑–∞—Å–µ—á/.test(q) || /—Å–µ—Ä–∏—Ñ|serif/.test(q)) { setFontFamily('—Å –∑–∞—Å–µ—á–∫–∞–º–∏'); return finish('–®—Ä–∏—Ñ—Ç: —Å –∑–∞—Å–µ—á–∫–∞–º–∏'); }
    if (/–º–æ–Ω–æ(—à–∏—Ä–∏–Ω–Ω)?|mono/.test(q)) { setFontFamily('–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π'); return finish('–®—Ä–∏—Ñ—Ç: –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π'); }

    if (/(–ø–æ–∫–∞–∑–∞—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å).*–¥–æ–ø(–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)?/.test(q)) { toggleSub(true); return finish('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—Ç–∫—Ä—ã—Ç–æ'); }
    if (/(—Å–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å).*–¥–æ–ø(–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)?/.test(q)) { toggleSub(false); return finish('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∑–∞–∫—Ä—ã—Ç–æ'); }
    if (/(–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å|–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)/.test(q)) { toggleSub(); return finish('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ'); }

    if (/–æ–∑–≤—É—á(—å|–∏—Ç—å)|–ø—Ä–æ—á–∏—Ç–∞–π|–ø—Ä–æ—á–µ—Å—Ç—å/.test(q)) { ttsPlay(); return finish('–û–∑–≤—É—á–∫–∞: —Å—Ç–∞—Ä—Ç'); }
    if (/–ø–∞—É–∑–∞|–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏/.test(q)) { ttsPause(); return finish('–û–∑–≤—É—á–∫–∞: –ø–∞—É–∑–∞'); }
    if (/–ø—Ä–æ–¥–æ–ª–∂(–∏|–∏—Ç—å)/.test(q)) { ttsPlay(); return finish('–û–∑–≤—É—á–∫–∞: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'); }
    if (/—Å—Ç–æ–ø|–æ—Å—Ç–∞–Ω–æ–≤–∏/.test(q)) { ttsStop(); return finish('–û–∑–≤—É—á–∫–∞: —Å—Ç–æ–ø'); }

    if (/(–≤ —Å–∞–º—ã–π –Ω–∏–∑|–≤ –∫–æ–Ω–µ—Ü|–≤–Ω–∏–∑ –¥–æ –∫–æ–Ω—Ü–∞)/.test(q)) { scrollToBottom(); return finish('–°–∫—Ä–æ–ª–ª: –≤ —Å–∞–º—ã–π –Ω–∏–∑'); }
    if (/(–≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö|–Ω–∞–≤–µ—Ä—Ö|–≤ –Ω–∞—á–∞–ª–æ)/.test(q)) { scrollToTop(); return finish('–°–∫—Ä–æ–ª–ª: –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö'); }

    if (/(–∞–≤—Ç–æ|–ø–ª–∞–≤–Ω–æ).*(–ø—Ä–æ–∫—Ä—É—Ç|—Å–∫—Ä–æ–ª–ª).*(–≤–Ω–∏–∑)/.test(q)) { startAutoScroll(+1, 1); return finish('–ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑'); }
    if (/(–∞–≤—Ç–æ|–ø–ª–∞–≤–Ω–æ).*(–ø—Ä–æ–∫—Ä—É—Ç|—Å–∫—Ä–æ–ª–ª).*(–≤–≤–µ—Ä—Ö)/.test(q)) { startAutoScroll(-1, 1); return finish('–ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö'); }
    if (/(—Å—Ç–æ–ø|–æ—Å—Ç–∞–Ω–æ–≤–∏).*(–ø—Ä–æ–∫—Ä—É—Ç|—Å–∫—Ä–æ–ª–ª)/.test(q)) { stopAutoScroll(); return finish('–ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª: —Å—Ç–æ–ø'); }

    if (/(–≤–Ω–∏–∑|–ø—Ä–æ–∫—Ä—É—Ç(–∏|–∫–∞) –≤–Ω–∏–∑)/.test(q)) {
      const n = extractNumber(q);
      if (/%|–ø—Ä–æ—Ü–µ–Ω—Ç/.test(q) && n){ doScroll(Math.round(window.innerHeight * (n/100))); return finish(`–°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –Ω–∞ ${n}%`); }
      scrollDownScreens(n||1); return finish(`–°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –Ω–∞ ${(n||1)} —ç–∫—Ä–∞–Ω(–∞)`);
    }
    if (/(–≤–≤–µ—Ä—Ö|–ø—Ä–æ–∫—Ä—É—Ç(–∏|–∫–∞) –≤–≤–µ—Ä—Ö)/.test(q)) {
      const n = extractNumber(q);
      if (/%|–ø—Ä–æ—Ü–µ–Ω—Ç/.test(q) && n){ doScroll(-Math.round(window.innerHeight * (n/100))); return finish(`–°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –Ω–∞ ${n}%`); }
      scrollUpScreens(n||1); return finish(`–°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –Ω–∞ ${(n||1)} —ç–∫—Ä–∞–Ω(–∞)`);
    }

    if (/(–Ω–∞–∑–∞–¥|–≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥|—à–∞–≥ –Ω–∞–∑–∞–¥)/.test(q)) { if(history.length>1) history.back(); else location.assign((location.origin||'/')+'/'); return finish('–ù–∞–≤–∏–≥–∞—Ü–∏—è: –Ω–∞–∑–∞–¥'); }
    if (/(–≤–ø–µ—Ä–µ–¥|–≤–ø–µ—Ä—ë–¥)($| –ø–æ –∏—Å—Ç–æ—Ä–∏–∏)/.test(q)) { history.forward(); return finish('–ù–∞–≤–∏–≥–∞—Ü–∏—è: –≤–ø–µ—Ä—ë–¥'); }
    if (/(–Ω–∞ –≥–ª–∞–≤–Ω—É—é|–¥–æ–º–æ–π|–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)/.test(q)) { location.assign((location.origin||'/')+'/'); return finish('–ù–∞–≤–∏–≥–∞—Ü–∏—è: –Ω–∞ –≥–ª–∞–≤–Ω—É—é'); }

    if (/–≤–µ—Ä–Ω–∏ .*–º–∞—Å—à—Ç–∞–±.*(1|–æ–¥–∏–Ω)/.test(q)) { setFontScale(1); return finish('–ú–∞—Å—à—Ç–∞–± = 1'); }
    if (/–∑—É–º|–º–∞—Å—à—Ç–∞–±/.test(q)){
      const n = extractNumber(q);
      if (n && n >= 50 && n <= 300){ setFontScale(n/100); return finish(`–ú–∞—Å—à—Ç–∞–± ${n}%`); }
    }

    return finish('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞');
  }

  const rec = new SpeechRec();
  rec.lang = 'ru-RU'; 
  rec.continuous = true;
  rec.interimResults = false;

  const toggleBtn = $('#va-toggle');
  const statusChip = $('#va-status');
  let active = false;
  let restarting = false;

  const setStatus = (txt)=>{ if (statusChip) statusChip.textContent = txt; };

  function startRec(){
    if (active) return;
    try{
      rec.start(); active = true;
      toggleBtn && (toggleBtn.textContent = 'üéô –í–´–ö–õ');
      setStatus('–°–ª—É—à–∞—é‚Ä¶'); log('–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ');
    }catch(e){ setStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞'); log('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', e); }
  }
  function stopRec(){
    if (!active) return;
    try{ rec.stop(); }catch(e){}
    active = false; restarting = false;
    toggleBtn && (toggleBtn.textContent = 'üéô –í–ö–õ');
    setStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ'); log('–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ');
    stopAutoScroll();
  }

  toggleBtn?.addEventListener('click', ()=>{ active ? stopRec() : startRec(); });
  window.addEventListener('keydown', (e)=>{
    if (e.altKey && (e.key.toLowerCase()==='g')){
      e.preventDefault(); active ? stopRec() : startRec();
    }
  }, {passive:false});

  rec.onresult = (ev)=>{
    for (let i = ev.resultIndex; i < ev.results.length; i++){
      const res = ev.results[i];
      if (res.isFinal){
        const phrase = res[0].transcript.trim();
        log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', `"${phrase}"`);
        const outcome = handleCommand(phrase);
        setStatus(outcome);
      }
    }
  };
  rec.onerror = (ev)=>{
    setStatus('–û—à–∏–±–∫–∞: ' + (ev.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'));
    log('onerror:', ev.error || ev);
    if (active && ['no-speech','aborted','network'].includes(ev.error)) {
      try { restarting = true; rec.stop(); } catch(e){}
    }
  };
  rec.onend = ()=>{
    log('onend; active=', active, 'restarting=', restarting);
    if (active || restarting){
      setTimeout(()=>{
        try { rec.start(); setStatus('–°–ª—É—à–∞—é‚Ä¶'); log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫‚Ä¶'); }
        catch(e){ setStatus('–û–∂–∏–¥–∞–Ω–∏–µ‚Ä¶'); log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å:', e); }
      }, 1000);
    }
  };
})();